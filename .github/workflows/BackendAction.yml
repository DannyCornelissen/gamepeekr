name: GamePeekrBackendBuildAndTest

on:
  push:
    branches: [ "Development" ]
  pull_request:
    branches: [ "Development" ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: Backend/GamePeekr

      - name: Build Projects
        run: dotnet build --no-restore
        working-directory: Backend/GamePeekr

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test Projects
        run:  dotnet test --logger "trx;LogFileName=test-results.trx"
        working-directory: Backend/GamePeekr/GamePeekrTest

      - name: Test Projects with Coverlet
        run: dotnet test --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        working-directory: Backend/GamePeekr/GamePeekrTest

      - name: Publish Code Coverage
        uses: codecov/codecov-action@v2
        with:
          file: ./Backend/GamePeekr/GamePeekrTest/TestResults/**/coverage.opencover.xml
          flags: unittests
          name: codecov-umbrella

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: GamePeekr-BackEnd-Tests
          path: "**/test-results.trx"                            
          reporter: dotnet-trx
          fail-on-error: true

  IntegrationTest:
    needs: test
    runs-on: ubuntu-latest
    env:
      FIREBASE_ADMIN_CREDENTIALS: ${{ secrets.FIREBASE_ADMIN_CREDENTIALS }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: Butterfly@1
          ACCEPT_EULA: Y
        ports:
          - 1433:1433

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test Projects
        run:  dotnet test --logger "trx;LogFileName=test-results-integration.trx"
        working-directory: Backend/GamePeekr/GamePeekrIntigrationTest
        env:
         ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TestGamePeekrDB; TrustServerCertificate=True; User Id=sa;Password=Butterfly@1;"
      
      
      - name: Test Projects with Coverlet
        run: dotnet test --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        working-directory: Backend/GamePeekr/GamePeekrTest

      - name: Publish Code Coverage
        uses: codecov/codecov-action@v2
        with:
         file: ./Backend/GamePeekr/GamePeekrTest/TestResults/*/.opencover.xml
         flags: unittests
         name: codecov-umbrella

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: GamePeekr-BackEnd-Integration-Tests
          path: "**/test-results-integration.trx"                            
          reporter: dotnet-trx
          fail-on-error: true
  

  Analyze:
    runs-on: ubuntu-latest
    needs: IntegrationTest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: Backend/GamePeekr

      - name: Build Projects
        run: dotnet build --no-restore
        working-directory: Backend/GamePeekr
      
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ~/.sonar/scanner/dotnet-sonarscanner begin /k:"DannyCornelissen_gamepeekr" /o:"dannycornelissen" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --no-restore -c Release Backend/GamePeekr
          ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

