name: GamePeekrBackendBuildAndTest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: Backend/GamePeekr

      - name: Build Projects
        run: dotnet build --no-restore
        working-directory: Backend/GamePeekr

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test Projects
        run:  dotnet test --logger "trx;LogFileName=test-results.trx"
        working-directory: Backend/GamePeekr/GamePeekrTest

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: GamePeekr-BackEnd-Tests
          path: "**/test-results.trx"                            
          reporter: dotnet-trx
          fail-on-error: true

  IntegrationTest:
    needs: test
    runs-on: ubuntu-latest
    env:
      FIREBASE_ADMIN_CREDENTIALS: ${{ secrets.FIREBASE_ADMIN_CREDENTIALS }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: Butterfly@1
          ACCEPT_EULA: Y
        ports:
          - 1433:1433

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test Projects
        run:  dotnet test --logger "trx;LogFileName=test-results-integration.trx"
        working-directory: Backend/GamePeekr/GamePeekrIntigrationTest
        env:
         ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TestGamePeekrDB; TrustServerCertificate=True; User Id=sa;Password=Butterfly@1;"
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: GamePeekr-BackEnd-Integration-Tests
          path: "**/test-results-integration.trx"                            
          reporter: dotnet-trx
          fail-on-error: true

  e2e-test:
    runs-on: ubuntu-latest
   
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: Butterfly@1
          ACCEPT_EULA: Y
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: run end to end
      run: |
        ASPNETCORE_ENVIRONMENT=e2etesting
        nohup dotnet run --project Backend/GamePeekr/GamePeekr > backend_log.txt &
        cd Website/gamepeekrwebsite
        nohup npm install && npm start > website_log.txt &
        echo "Starting Cypress tests"
        sleep 30s
        npm install
        npx cypress run 
        exit

    - name: log
      if: always()
      run: |
        cat backend_log.txt
        cat website_log.txt
  

  Analyze:
    runs-on: ubuntu-latest
    needs: e2e-test

    env:
      FIREBASE_ADMIN_CREDENTIALS: ${{ secrets.FIREBASE_ADMIN_CREDENTIALS }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: Butterfly@1
          ACCEPT_EULA: Y
        ports:
          - 1433:1433

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: Backend/GamePeekr

      - name: Build Projects
        run: dotnet build --no-restore
        working-directory: Backend/GamePeekr
      
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-coverage
          pushd Backend/GamePeekr
          
          ~/.sonar/scanner/dotnet-sonarscanner begin /k:"DannyCornelissen_gamepeekr" /o:"dannycornelissen" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-incremental
          dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'       
          ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          popd

  deploy-to-gh-pages:
   runs-on: ubuntu-latest

   steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
          git config --global user.email "danny.cornelissen38@gmail.com"
          git config --global user.name "DannyCornelissen"
          git remote set-url origin https://DannyCornelissen:${{ secrets.GH_TOKEN }}@github.com/DannyCornelissen/gamepeekr.git
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install
      working-directory: Website/gamepeekrwebsite
      
    - name: Install gh-pages
      run: npm install -g gh-pages
      working-directory: Website/gamepeekrwebsite

    - name: Build React app
      run: npm run build
      working-directory: Website/gamepeekrwebsite

    - name: deploy to github pages
      working-directory: Website/gamepeekrwebsite
      run: |
          npm run deploy

  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build image
      run: docker build -t dannycornelissen/gamepeekrbackend:api Backend/GamePeekr/

    - name: Build image Website
      run: docker build -t dannycornelissen/gamepeekrbackend:website Website/gamepeekrwebsite/
    

    - name: Log in to the docker hub
      uses: docker/login-action@v2
      with:
        username: dannycornelissen
        password: ${{ secrets.DOCKERHUBPASSWORD }}

    - name: Push API Docker Image to docker hub
      run: docker push dannycornelissen/gamepeekrbackend:api

    - name: Push Website Docker Image to docker hub
      run: docker push dannycornelissen/gamepeekrbackend:website

  deploy-test:
    runs-on: ubuntu-latest
   
    needs: deploy
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: Butterfly@1
          ACCEPT_EULA: Y
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to the docker hub
      uses: docker/login-action@v2
      with:
        username: dannycornelissen
        password: ${{ secrets.DOCKERHUBPASSWORD }}
  
   
    - name: sleep
      run: sleep 30s
   
    - name: run Backend
      run: docker run -d -e 'ASPNETCORE_ENVIRONMENT=e2etesting' -e 'ENV=e2etesting' -p 32001:443 dannycornelissen/gamepeekrbackend:api
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=TestGamePeekrDB; TrustServerCertificate=True; User Id=sa;Password=Butterfly@1;"
    
    - name: run Website
      run: docker run -d -e 'BACKEND_URL=https://localhost:32001' -p 3000:3000 dannycornelissen/gamepeekrbackend:website

    - name: run end to end
      run: |
        cd Website/gamepeekrwebsite 
        npm install
        npx cypress run 

    
    - name: log
      if: always()
      run: |
        docker ps -a
        docker logs $(docker ps -a -q --filter ancestor=dannycornelissen/gamepeekrbackend:api --format="{{.ID}}")
        docker logs $(docker ps -a -q --filter ancestor=dannycornelissen/gamepeekrbackend:website --format="{{.ID}}")
    






